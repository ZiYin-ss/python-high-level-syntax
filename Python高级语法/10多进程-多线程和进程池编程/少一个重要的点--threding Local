from threading import Thread, get_ident
import time

num = 0


def task(arg):
    # get_ident()返回的就是每一个线程的唯一标识
    print(get_ident())
    global num
    num += 1
    time.sleep(1)
    print(num)


for i in range(10):
    t = Thread(target=task, args=(i,))
    t.start()

上面会产生问题 就是数据不安全
from threading import Thread, local, get_ident
import time


local_obj = local()


def task(arg):
    """
        threading.local的作用：为每个线程开辟一块空间进行数据的存储
        空间与空间之间数据是隔离的
    """
    # get_ident()返回的就是每一个线程的唯一标识
    print(get_ident())
    # 线程执行到此的时候，为每一个线程开辟一块空间用来存储对象的值
    local_obj.value = arg
    time.sleep(1)
    print(local_obj.value)


for i in range(10):
    t = Thread(target=task, args=(i,))
    t.start()

由于创建了threading.local对象，当为对象赋值属性的时候，会为每个线程开辟一块空间来存储对象的属性值，
空间与空间之间数据是隔离的，这样最终打印的时候就是线程自己空间中保存的数据的值。



自定义threading Local 其实不难
import time
try:
    from greenlet import getcurrent as get_ident
except Exception as e:
    from threading import get_ident

from threading import Thread


class CustomLocal(object):
    """
    自定义local对象，基于面向对象
    为每个线程（协程）开辟一块空间进行数据的存储
    空间与空间之间是隔离的
    """
    def __init__(self):
        # self.storage = {}  # 执行此句代码的时候会先触发__setattr__方法
        # 为了避免报错：RecursionError: maximum recursion depth exceeded while calling a Python object
        # 需要先把storage创建出来，所以调用父类的__setattr__方法
        super(CustomLocal, self).__setattr__("storage", {})

    def __setattr__(self, key, value):
        ident = get_ident()
        if ident in self.storage:
            self.storage[ident][key] = value
        else:
            self.storage[ident] = {key: value}  # 执行此句的时候又会触发__setattr__方法，所有就进入了死循环

    def __getattr__(self, item):
        ident = get_ident()
        return self.storage[ident][item]


local = CustomLocal()


def task(arg):
    local.var = arg  这个不就是自定义的local 设置值调用setattr
    time.sleep(1)
    print(local.var)
    取值就是getattr 为什么会这样取出来呢 因为这个local是一个实例对象 所以说每次get_ident的时候设置值取值都是同一个线程
    多个线程的话 不就是每个线程进来了之后一个新的线程 实例化类
    我一直好奇为什么一直是这个实例呢  key不一样啊  这次进去之后 这个key是保存了这次的 
    那次进去是那个的 取值 还是取了当前函数的刚开始创建的
         self.storage[ident][key] = value
    不难

for i in range(10):
    t = Thread(target=task, args=(i,))
    t.start()