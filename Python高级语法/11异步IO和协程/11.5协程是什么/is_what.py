pass

"""
    首先说一句 
        这个协程可以有效的解决select回调问题
    
    C10M问题
        如何利用8核心CPU 64G内存 在10gbps的网络上保持1000万并发连接
"""
"""
    回调模式编码复杂度高
    同步编程的并发性不高
    多线程编程需要线程间同步 lock
    
    采用同步的方式去编写异步的代码
    使用单线程去切换任务
        线程是由操作系统切换的 单线程切换意味着我们需要程序员自己去调度任务
        不再需要锁 并发性高 如果单线程内切换函数 性能远高于线程切换 并发性更高
    
    其实回调+事件循环+select 这个模式对原始的编程模式是一个很大的挑战 包括我自己写这个的时候 
    我是有js回调函数的基础 觉得还好 但是还是觉得有点别扭 
    上面的单线程切换也是很大的挑战
    
    实现的话
        传统函数调用的过程 A->B->C
        需要一个可以暂停的函数(比如IO操作 会自己做我们暂停了也会继续IO) 并且可以在适当的时候恢复该函数的继续执行
    这个就是协程 -> 有多个入口的函数  可以暂停的函数(可以向暂停的地方传入值 yield)
    
    协程是非抢占式的多任务子例程的概括，可以允许有多个入口点在例程中确定的位置来控制程序的暂停与恢复执行。
    多个入口点是指可以在一个协程内多次使用如yield的关键字，每个yield的位置，都是程序员可以使之让出执行权、暂停、恢复、传递信号、注入执行结果等操作。
"""