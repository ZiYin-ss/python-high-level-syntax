class A:
    aa = 1  # 这个就是类变量

    #  self 其实就是实例
    def __init__(self, x, y):
        self.x = x  # 对象变量
        self.y = y


a = A(2, 3)

# 此时print(a.aa) 是一百 但是 这个地方和类变量没区别  就是单纯的给a这个实例添加一个属性 aa=100
#  所以会先查找本身的变量 是100  此时A这个类的变量没有改
a.aa = 100

print(a.x, a.y, a.aa)
print(A.aa)  # 1 类变量不会向下查找 就这恶心
print(A.x)  # 报错

"""
    为什么这个地方 a.x a.y都是实例传进来的 但aa是类变量 为什么能找到呢 
    查找方式 会先查找对象的变量(实例变量) 没有就向上查询类变量
"""
# 如果此时你打印A.aa 就是10了  然后你这个类创建出来的实例对象 要是调用 xx.aa 自己要是没有这个属性的话 就是10
# 意思是说 通过这个方式是可以改的
A.aa = 10

